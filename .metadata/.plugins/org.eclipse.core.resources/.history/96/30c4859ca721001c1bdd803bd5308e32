
// SpringBootの起動クラスを指定
@ContextConfiguration(classes = Application.class)
// クラス内の全メソッドにおいて、実行前にDIコンテナの中身を破棄する
@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)
// テストランナー：各テストケース（テストメソッド）を制御する：DIする場合は必須？
@ExtendWith(SpringExtension.class)
// MockおよびWebApplicationContextの自動ロード：サーブレット環境を自動作成する
@AutoConfigureMockMvc
//テスト時に起動するSprinbBootプロジェクトの使用ポート番号を設定する場合：ランダム
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
// クラス単位でインスタンス生成（通常はメソッド単位）：@BeforeAllを使うため
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class HelloControllerTest {
	public class BookControllerTest {

	    @Autowired
	    MockMvc mockMvc;  // SpringMVCモックオブジェクト
	    @Autowired
	    WebApplicationContext wac;  // Webアプリへの設定提供
	    @BeforeAll
	    public void テスト前処理() {
	        // Thymeleafを使用していることがテスト時に認識されない様子
	        // 循環ビューが発生しないことを明示するためにViewResolverを使用
	        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();
	        viewResolver.setPrefix("/templates");
	        viewResolver.setSuffix(".html");
	      mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();
	    }
	    @Test
	    public void 書籍追加一覧ページ表示 () throws Exception {

	        MvcResult result = mockMvc.perform(  get("/books")  )

	            .andExpect(  status().is2xxSuccessful()  )

	            .andExpect(  view().name("books/list")  )

	            .andReturn();
	    }   
	}
